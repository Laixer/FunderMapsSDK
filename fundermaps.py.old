#!/usr/bin/env python3

from configparser import ConfigParser
import os
import sys
import logging
import colorlog
import argparse
import importlib.util
# from systemd import journal

from fundermapssdk import util, app


def load_script_module(script_name: str):
    """
    Load and execute a Python script module.

    Args:
        script_name (str): The name of the script module to load.

    Raises:
        ImportError: If the script module cannot be found or loaded.

    """
    if not script_name.endswith(".py"):
        script_name += ".py"

    current_directory = os.path.dirname(os.path.realpath(__file__))
    script_path = os.path.join(current_directory, "scripts", script_name)

    spec = importlib.util.spec_from_file_location(script_name, script_path)
    module = importlib.util.module_from_spec(spec)
    sys.modules[script_name] = module
    spec.loader.exec_module(module)


parser = argparse.ArgumentParser(description="FunderMaps SDK Script Runner")
parser.add_argument("-c", "--config", help="path to the configuration file")
parser.add_argument("-l", "--log-level", help="log level", default="INFO")
parser.add_argument("--systemd", help="log to systemd", action="store_true")
parser.add_argument("script", help="path to the script to run")
parser.add_argument("args", nargs=argparse.REMAINDER)

args = parser.parse_args()

# if args.systemd:
    # handler = journal.JournalHandler(SYSLOG_IDENTIFIER=args.script)
# else:
handler = colorlog.StreamHandler()
color_format = "%(log_color)s%(levelname)-8s %(name)s%(reset)s %(message)s"
handler.setFormatter(colorlog.ColoredFormatter(color_format))

logging.basicConfig(level=args.log_level, handlers=[handler], format="%(message)s")

if args.config:
    config = ConfigParser()
    config.read(args.config)
else:
    config = util.find_config()

load_script_module(args.script)

logger = logging.getLogger("app")
app.App(config, logger).asyncio_invoke(args.args)
