[project]
name = "fundermapssdk"
version = "0.1.0"
description = "FunderMaps SDK - Modern Python toolkit for geospatial data processing"
authors = [{ name = "FunderMaps B.V.", email = "info@fundermaps.com" }]
dependencies = [
    "boto3>=1.38.11",
    "colorlog>=6.7.0",
    "httpx[http2]>=0.28.1",
    "mailgun>=0.1.1",
    "psycopg2-binary>=2.9.10",
    "python-dotenv>=1.0.0",
]
readme = "README.md"
requires-python = ">= 3.10"
license = { text = "MIT" }
keywords = ["geospatial", "mapping", "data-processing"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "ruff>=0.1.9",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0",
]

[project.urls]
Homepage = "https://github.com/Laixer/FunderMapsSDK"
Repository = "https://github.com/Laixer/FunderMapsSDK"
Issues = "https://github.com/Laixer/FunderMapsSDK/issues"

[project.scripts]
fundermaps-export = "fundermapssdk.command:export_product"
fundermaps-process = "fundermapssdk.command:process_mapset"
fundermaps-refresh = "fundermapssdk.command:refresh_models"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "ruff>=0.1.9",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0",
]

[tool.hatch.build.targets.wheel]
packages = ["fundermapssdk"]

# Ruff configuration - Modern Python linter and formatter
[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501", # line too long, handled by formatter
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "S101", # Use of assert detected
    "T20",  # Allow print statements for now
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["S101"] # Allow assert in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["boto3.*", "mailgun.*", "psycopg2.*"]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=fundermapssdk",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["fundermapssdk"]
omit = ["*/tests/*", "*/test_*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ __ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
